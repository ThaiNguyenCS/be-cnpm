#!/usr/bin/env node

/**
 * Module dependencies.
 */


const sequelize = require("../config/mysql.database");

var app = require("../app");
var debug = require("debug")("expressj-example:server");
var http = require("http");
const { SystemConfig } = require("../models/SystemConfig");
const { PermittedFileType } = require("../models/PermittedFileType");
const { PaperBoughtHistory } = require("../models/PaperBoughtHistory");
const { Printer } = require("../models/Printer");
const { Report } = require("../models/Report");
const { PrintingLog } = require("../models/PrintingLog");
const { SPSO } = require("../models/SPSO");
const { Student } = require("../models/Student");
const { File } = require("../models/File");
require("../models/associations")

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Synchronize the models with the database
 */
sequelize
    .authenticate()
    .then(() => {
        console.log("Database synchronized");
        server.listen(port);
        server.on("error", onError);
        server.on("listening", onListening);
    })
    .catch((error) => {
        console.error("Unable to synchronize the database:", error);
    });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
